import { TipButton } from '@/components/tips/tip-button';
import {
  Modal,
  ModalBody,
  ModalContent,
  ModalHeader,
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@heroui/react';
import { useScreenSize } from '@hexa/ui/hooks/use-screen-size';
import { LinkIcon, QrCodeIcon } from '@hexa/ui/icons';
import { useState } from 'react';

const sources = [
  {
    type: 'LINK',
    icon: LinkIcon,
    name: 'Direct Link',
    description: 'Access through direct link clicks or manual URL entry',
    examples: [
      'Clicking links from websites',
      'Pasting URL in browser',
      'Email link clicks',
    ],
  },
  {
    type: 'QRCODE',
    icon: QrCodeIcon,
    name: 'QR Code',
    description: 'Access by scanning QR codes generated by this platform',
    examples: [
      'Mobile phone QR scanning',
      'Marketing materials',
      'Physical displays',
    ],
  },
];

const SourceEntry = ({
  icon: Icon,
  name,
  description,
  examples,
}: {
  icon: typeof LinkIcon;
  name: string;
  description: string;
  examples: string[];
}) => {
  return (
    <div className="flex gap-2 py-1.5">
      <Icon className="my-1 h-4 w-4 shrink-0" />
      <div>
        <div className="font-medium text-sm">{name}</div>
        <div className="text-default-500 text-xs">{description}</div>
        <ul className="mt-1 list-inside list-disc text-default-500 text-xs">
          {examples.map((example) => (
            <li key={example}>{example}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

const SourceContent = () => (
  <div className="space-y-3">
    <div>
      <h4 className="font-medium text-sm">Traffic Source</h4>
      <p className="text-default-500 text-xs">
        Identifies how users accessed your link, either through direct link
        clicks or by scanning QR codes generated by this platform.
      </p>
    </div>

    <div className="space-y-2">
      {sources.map((source) => (
        <SourceEntry
          key={source.type}
          icon={source.icon}
          name={source.name}
          description={source.description}
          examples={source.examples}
        />
      ))}
    </div>

    <div className="space-y-2">
      <h5 className="font-medium text-xs">Use Cases:</h5>
      <ul className="list-inside list-disc space-y-1 text-default-500 text-xs">
        <li>Track effectiveness of different distribution channels</li>
        <li>Create unique experiences for QR code scans</li>
        <li>Analyze user behavior patterns by access method</li>
      </ul>
    </div>
  </div>
);

export const SourceTips = ({ className }: { className?: string }) => {
  const { isMobile } = useScreenSize();
  const [isModalOpen, setIsModalOpen] = useState(false);

  if (isMobile) {
    return (
      <>
        <TipButton
          className={className}
          aria-label="About traffic sources"
          onPress={() => setIsModalOpen(true)}
        />
        <Modal
          isOpen={isModalOpen}
          onOpenChange={setIsModalOpen}
          scrollBehavior="inside"
          size="full"
        >
          <ModalContent>
            <ModalHeader>Traffic Source</ModalHeader>
            <ModalBody className="pb-6">
              <SourceContent />
            </ModalBody>
          </ModalContent>
        </Modal>
      </>
    );
  }

  return (
    <Popover placement="right" showArrow>
      <PopoverTrigger>
        <TipButton className={className} aria-label="About traffic sources" />
      </PopoverTrigger>
      <PopoverContent className="w-[400px]">
        <div className="p-4">
          <SourceContent />
        </div>
      </PopoverContent>
    </Popover>
  );
};
