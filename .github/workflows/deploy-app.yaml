name: Deploy APP

# Trigger on manual workflow dispatch or pushes to main/xyz branches
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose an environment to deploy to"
        type: choice
        options:
          - staging
          - production
        required: true
        default: "production"
  push:
    branches:
      - main
      - xyz

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    # Set environment based on input or branch name
    # If manually triggered: use selected environment
    # If push to main: use production
    # Otherwise: use staging
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}

    steps:
      # Debug step to verify environment selection
      - name: Echo env
        run: |
          echo ${{ env.DEPLOY_ENV }}

      # Checkout repository
      - uses: actions/checkout@v4

      # Setup pnpm package manager
      - uses: pnpm/action-setup@v2
        with:
          version: 9

      # Setup Node.js with pnpm caching
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      # Enhanced caching configuration for pnpm and Next.js
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup build cache
        with:
          path: |
            ${{ env.STORE_PATH }}
            ${{ github.workspace }}/apps/app/.next/cache
            ${{ github.workspace }}/node_modules/.cache
          # Enhanced cache key including Next.js version
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-nextjs-${{ hashFiles('**/next.config.js') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-pnpm-
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-

      # Add Next.js build cache environment variable
      - name: Setup Next.js cache directory
        run: |
          echo "NEXT_CACHE_DIR=${{ github.workspace }}/apps/app/.next/cache" >> $GITHUB_ENV

      # Install dependencies using pnpm
      - name: Install pnpm
        run: pnpm install

      # Create environment file with necessary variables
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_APP_NAME=${{ vars.NEXT_PUBLIC_APP_NAME }}" > ./apps/app/.env
          echo "NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY=${{ vars.NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ vars.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_STORAGE_ENDPOINT=${{ vars.NEXT_PUBLIC_STORAGE_ENDPOINT }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_STORAGE_BASE_URL=${{ vars.NEXT_PUBLIC_STORAGE_BASE_URL }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_APP_URL=${{ vars.NEXT_PUBLIC_APP_URL }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_ADMIN_URL=${{ vars.NEXT_PUBLIC_ADMIN_URL }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_WWW_URL=${{ vars.NEXT_PUBLIC_WWW_URL }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_REDIRECT_URL=${{ vars.NEXT_PUBLIC_REDIRECT_URL }}" >> ./apps/app/.env
          echo "NEXT_PUBLIC_LOGIN_DOMAIN=${{ vars.NEXT_PUBLIC_LOGIN_DOMAIN }}" >> ./apps/app/.env
          cat ./apps/app/.env

      # Create Cloudflare Workers configuration file
      - name: Create wrangler.toml
        run: |
          cat << 'EOF' > ./apps/app/wrangler.toml
          ${{ vars.APP_WRANGLER_TOML }}
          EOF
          cat ./apps/app/wrangler.toml

      # Build and deploy to Cloudflare Workers
      - name: Build and Deploy
        id: deploy
        uses: cloudflare/wrangler-action@v3
        env:
          # Authentication and API keys
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          OAUTH_GOOGLE_CLIENT_ID: ${{ secrets.OAUTH_GOOGLE_CLIENT_ID }}
          OAUTH_GOOGLE_CLIENT_SECRET: ${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }}
          CF_TURNSTILE_SECRET_KEY: ${{ secrets.CF_TURNSTILE_SECRET_KEY }}

          # Storage configuration
          STORAGE_ACCESS_KEY_ID: ${{ secrets.STORAGE_ACCESS_KEY_ID }}
          STORAGE_SECRET_ACCESS_KEY: ${{ secrets.STORAGE_SECRET_ACCESS_KEY }}

          # Payment processing
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

          # Domain and redirect configuration
          DEFAULT_DOMAINS: ${{ secrets.DEFAULT_DOMAINS }}
          REDIRECT_DATASET: ${{ secrets.REDIRECT_DATASET }}

          # Cloudflare Workers AI
          CF_WAE_API_TOKEN: ${{ secrets.CF_WAE_API_TOKEN }}
          CF_WAE_ACCOUNT_ID: ${{ secrets.CF_WAE_ACCOUNT_ID }}
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          # Set environment to staging if not production
          environment: ${{ env.DEPLOY_ENV != 'production' && 'staging' || '' }}
          workingDirectory: "apps/app"
          packageManager: pnpm
          # Pre-deployment commands
          preCommands: |
            echo "*** pre command ***"
            pnpm run build:worker
            ls .open-next
          command: |
            deploy
          # Pass secrets to Cloudflare Workers
          secrets: |
            RESEND_API_KEY
            OAUTH_GITHUB_CLIENT_ID
            OAUTH_GITHUB_CLIENT_SECRET
            OAUTH_GOOGLE_CLIENT_ID
            OAUTH_GOOGLE_CLIENT_SECRET
            CF_TURNSTILE_SECRET_KEY
            STORAGE_ACCESS_KEY_ID
            STORAGE_SECRET_ACCESS_KEY
            STRIPE_SECRET_KEY
            STRIPE_WEBHOOK_SECRET
            DEFAULT_DOMAINS
            REDIRECT_DATASET
            CF_WAE_API_TOKEN
            CF_WAE_ACCOUNT_ID
